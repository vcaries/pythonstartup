"""
Script Name: Package Importer and Installer for Python Startup Interpreter

Description:
This script allows you to import Python packages specified in the PACKAGE_SHORTCUTS dictionary. If a package fails
to import, it attempts to install it using pip. After importing or installing, you can use the imported packages
with their corresponding shortcuts.

The PACKAGE_SHORTCUTS dictionary defines the package names and their corresponding shortcuts. You can add or modify
the package shortcuts as needed.

Usage:
1. Run python command in interactive mode.
2. After successful import or installation, you can access the imported packages using the specified shortcuts.
   For example, if 'numpy' is imported with the shortcut 'np', you can access it as 'np'.

Note:
1. Make sure you have the required permissions to install packages using pip.
2. Avoid running this script with sudo privileges unless necessary, as it may modify your system-wide Python packages.

"""

# Import built-in modules
import importlib
import subprocess
import sys
import os


# Global constants
PACKAGE_SHORTCUTS = {'os': 'os',
                     'sys': 'sys',
                     'numpy': 'np',
                     'scipy': 'sp',
                     'pandas': 'pd',
                     'sympy': 'sym'}  # Modules to load {'module_name': 'module_shorcut'}
GREEN = '\033[92m'      # ANSI escape code for green
RED = '\033[91m'        # ANSI escape code for red
YELLOW = '\033[93m'     # ANSI escape code for yellow
RESET = '\033[0m'       # ANSI escape code to reset color
INDENT = ' ' * 4        # Indentation for printing


def cl():
    """
    Clear the console.
    """
    os.system('clear')


def print_title(content):
    """
    Print the title of the console.

    Parameters:
        content (str): The content of the title.
    """
    separator = '=' * len(content)
    print(f'{separator}\n{content}\n{separator}')


def import_package(shortcut, package_name):
    """
    Import a Python package and handle exceptions if import fails.

    Parameters:
        shortcut (str): The shortcut to use for the package.
        package_name (str): The name or shortcut of the package to import.

    Returns:
        module or None: Returns the imported module if successful, None if import failed.
    """
    try:
        # Attempt to import the package
        globals()[shortcut] = importlib.import_module(package_name)
        print(f'{INDENT}{GREEN}v Loading package {package_name} as {shortcut}{RESET}')
        return globals()[shortcut]

    except ImportError:
        print(f'{INDENT}{RED}x Failed to import {package_name} as {shortcut}{RESET}')
        return None


def install_package(package_name):
    """
    Attempt to install a package using pip.

    Parameters:
        package_name (str): The name of the package to install.
    """
    python_version = f"python{sys.version_info.major}.{sys.version_info.minor}"
    print(f"{INDENT}{YELLOW}Attempting to install {package_name} using pip...{RESET}")
    try:
        subprocess.check_call([python_version, "-m", "pip", "install", package_name, "-q"])
        print(f"{INDENT}{YELLOW}...{package_name} has been installed successfully{RESET}")

    except subprocess.CalledProcessError:
        print(f"{INDENT}{RED}Failed to install {package_name}{RESET}")


def main():
    """
    Main function that imports packages based on the PACKAGE_SHORTCUTS dictionary.
    """
    print_title('Importing Additionnal Packages')
    for package_name, shortcut in PACKAGE_SHORTCUTS.items():
        module = import_package(shortcut, package_name)
        if module is None:
            install_package(package_name)
            # Retry importing the package after installation
            import_package(shortcut, package_name)

    print_title('Additional Packages Imported')


if __name__ == "__main__":
    main()
    # Remove constants from global namespace
    del GREEN, RED, YELLOW, RESET, INDENT, PACKAGE_SHORTCUTS
